{"version":3,"sources":["data_storage/useContext.js","data_storage/Thead.js","data_storage/Tbody.jsx","data_storage/Table.js","data_storage/Form.js","data_storage/Data_statistics.js","App.js","serviceWorker.js","index.js"],"names":["CollectionContext","React","createContext","CollectionProvider","props","storageData","localStorage","getItem","useState","item","num","price","totalPrice","keyHolder","collection","JSON","parse","data","setData","useEffect","jsonState","stringify","setItem","err","console","error","handleLocalStorage","Provider","value","target","name","e","preventDefault","parseStorage","NotRemoved","filter","i","matchIndex","findIndex","splice","total","Number","children","Thead","useContext","map","keys","index","key","Tbody","values","onClick","handleGetId","Table","Form","handleChange","handleFormSubmit","handleDeleteData","handleEditData","handleCalculate","handleCache","onSubmit","type","onChange","required","onInput","readOnly","Data_statistics","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.65940865.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst CollectionContext = React.createContext([\n  {},\n  () => {},\n  () => {},\n  () => {},\n  () => {},\n  () => {},\n  () => {},\n  () => {},\n]);\n\nconst CollectionProvider = (props) => {\n  //getting and setting the localstorage data to the state on load\n  let storageData = localStorage.getItem(\"itemCollection\");\n\n  //declaring of state values\n  const [data, setData] = useState({\n    item: \"\",\n    num: \"\",\n    price: \"\",\n    totalPrice: \"\",\n    keyHolder: null,\n    collection: storageData ? JSON.parse(storageData) : [],\n  });\n\n  //handling the formfield changes\n  const handleChange = ({ target }) => {\n    setData((data) => ({ ...data, [target.name]: target.value }));\n  };\n\n  //getting the total price of the data\n  const handleCalculate = ({ target }) => {\n    let total = Number(data.num) * Number(target.value);\n    return data.num ? setData((data) => ({ ...data, totalPrice: total })) : 0;\n  };\n\n  //setting input values to the state\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    const { item, num, price, totalPrice } = data;\n    setData((data) => ({\n      ...data,\n      collection: [...data.collection, { item, num, price, totalPrice }],\n    }));\n  };\n\n  //handling data edition from the localstorage\n  const handleEditData = () => {\n    const parseStorage = JSON.parse(storageData);\n    const { keyHolder, item, num, price, totalPrice } = data;\n    let matchIndex = parseStorage.findIndex((value, i) => i === keyHolder);\n    parseStorage.splice(matchIndex, 1, {\n      item,\n      num,\n      price,\n      totalPrice,\n    });\n    const jsonState = JSON.stringify(parseStorage);\n    localStorage.setItem(\"itemCollection\", jsonState);\n    setData((data) => ({ ...data, collection: parseStorage }));\n  };\n\n  //handle deletion of data from the local storage\n  const handleDeleteData = () => {\n    const parseStorage = JSON.parse(storageData);\n    const { keyHolder } = data;\n    let NotRemoved = parseStorage.filter((value, i) => i !== keyHolder);\n    const jsonState = JSON.stringify(NotRemoved);\n    localStorage.setItem(\"itemCollection\", jsonState);\n    setData((data) => ({ ...data, collection: NotRemoved }));\n  };\n\n  const handleCache = () => {\n    setData((data) => ({ ...data, collection: [] }));\n    return localStorage.setItem(\"itemCollection\", []);\n  };\n  useEffect(() => {\n    //setting state form field data to local storage\n    const handleLocalStorage = () => {\n      const { collection } = data;\n      try {\n        const jsonState = JSON.stringify(collection);\n        localStorage.setItem(\"itemCollection\", jsonState);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    handleLocalStorage();\n  });\n\n  return (\n    <CollectionContext.Provider\n      //assign the provider values\n      value={[\n        data,\n        setData,\n        handleChange,\n        handleFormSubmit,\n        handleDeleteData,\n        handleEditData,\n        handleCalculate,\n        handleCache,\n      ]}\n    >\n      {props.children}\n    </CollectionContext.Provider>\n  );\n};\n\nexport { CollectionContext, CollectionProvider };\n","import React, { useContext } from \"react\";\nimport { CollectionContext } from \"./useContext\";\n\nconst Thead = () => {\n  const [data] = useContext(CollectionContext);\n  const { collection } = data;\n  const headingArr = [\"Item\", \"Num\", \"Price\", \"Total Price\"];\n  return (\n    <thead>\n      <tr>\n        {collection &&\n          headingArr.map((keys, index) => <th key={index}>{keys}</th>)}\n      </tr>\n    </thead>\n  );\n};\n\nexport default Thead;\n","import React, { useContext } from \"react\";\nimport { CollectionContext } from \"./useContext\";\n\nconst Tbody = () => {\n  const [data, setData] = useContext(CollectionContext); //destructuring context values\n\n  //handling the table row value\n  const handleGetId = ({ index, values }) => {\n    const { item, num, price, totalPrice } = values;\n    setData((data) => ({\n      ...data,\n      item,\n      num,\n      price,\n      totalPrice,\n      keyHolder: index,\n    }));\n  };\n\n  const { collection } = data; //destructuring the collection from state\n  return (\n    <tbody>\n      {collection &&\n        collection.map((values, index) => (\n          <tr key={index} onClick={() => handleGetId({ index, values })}>\n            <td>{values.item}</td>\n            <td>{values.num}</td>\n            <td>{values.price}</td>\n            <td>{values.totalPrice}</td>\n          </tr>\n        ))}\n    </tbody>\n  );\n};\n\nexport default Tbody;\n","import React from \"react\";\n\nimport Thead from \"./Thead\";\nimport Tbody from \"./Tbody\";\n\nconst Table = () => {\n  return (\n    <table>\n      <Thead />\n      <Tbody />\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { useContext } from \"react\";\nimport { CollectionContext } from \"./useContext\";\n\nconst Form = () => {\n  const [\n    data,\n    ,\n    handleChange,\n    handleFormSubmit,\n    handleDeleteData,\n    handleEditData,\n    handleCalculate,\n    handleCache,\n  ] = useContext(CollectionContext);\n\n  return (\n    <div>\n      <form onSubmit={handleFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"item\"\n          value={data.item}\n          onChange={handleChange}\n          required={true}\n        />\n        <input\n          type=\"number\"\n          name=\"num\"\n          value={data.num}\n          onChange={handleChange}\n          required={true}\n        />\n        <input\n          type=\"number\"\n          name=\"price\"\n          value={data.price}\n          onChange={handleChange}\n          onInput={handleCalculate}\n          required={true}\n        />\n        <input\n          type=\"number\"\n          name=\"totalPrice\"\n          value={data.totalPrice}\n          required={true}\n          readOnly={true}\n        />\n        <div>\n          <button>add</button>\n        </div>\n      </form>\n      <div>\n        <button onClick={handleEditData}>edit</button>\n        <button onClick={handleDeleteData}>del</button>\n        <button onClick={handleCache}>clear cache</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport Table from \"./Table\";\nimport Form from \"./Form\";\n\nconst Data_statistics = () => {\n  return (\n    <div>\n      <Form />\n      <Table />\n    </div>\n  );\n};\n\nexport default Data_statistics;\n","import React from \"react\";\nimport DataStatistics from \"../src/data_storage/Data_statistics.js\";\n\nimport { CollectionProvider } from \"../src/data_storage/useContext\";\n\nconst App = () => {\n  return (\n    <CollectionProvider>\n      <div className=\"container\">\n        <DataStatistics />\n      </div>\n    </CollectionProvider>\n  );\n};\n//https://upmostly.com/tutorials/how-to-use-the-usecontext-hook-in-reacthttps: export default App;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}